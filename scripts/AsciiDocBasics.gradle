/*
 * This build file is part of the docToolchain
 */
buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}

	dependencies {
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
	}
}

apply plugin: 'maven'

import org.asciidoctor.gradle.AsciidoctorTask

configurations.all {
	resolutionStrategy {
		force 'org.codehaus.groovy:groovy-all:2.4.12'
	}
	repositories {
		mavenLocal()
		jcenter()
	}
}

// configuration
def config
println "docDir: ${docDir}"
println "mainConfigFile: ${mainConfigFile}"
config = new ConfigSlurper().parse(new File(docDir, mainConfigFile).text)
println "inputPath: ${config.inputPath}"
println "inputFiles: ${config.inputFiles}"
println "outputPath: ${config.outputPath}"

// Why?
// Snippets are genearted by an maven-build project, but the doctoolchain application is runned by gradle via command-line call.
// I need a way to set an custom snippet location to reuse the spring-rest-docs asccidoctor plugin from doctoolchain, and so I forked "spring-restdocs-asciidoctor"
// and so I adjusted the "SnippetsDirectoryResolver.class" to provide an way to set from outside a new snippet-directory.
System.setProperty("restdocs.asciidoctor.snippets", "target/generated-snippets")
logger.info("Value of 'restdocs.asciidoctor.snippets' is {}", System.properties.getProperty("restdocs.asciidoctor.snippets"))

ext {
	srcDir = "${docDir}/${config.inputPath}"
	targetDir = "${docDir}/${config.outputPath}"
	javaVersion = System.getProperty("java.version")
	currentDate = new Date().format("d. MMM yyyy")
	// where HTMLSanityCheck checking results ares stored
	checkingResultsPath = "${docDir}/${config.outputPath}/report/htmlchecks"
	sourceFiles = config.inputFiles
}



dependencies {
	asciidoctor 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
	// carefull!
	// asciidoctor 1.5.6 needs diagram 1.5.4.1
	// but then reveal.js is broken...
	// https://github.com/asciidoctor/asciidoctor-diagram/issues/161
	asciidoctor 'org.asciidoctor:asciidoctorj-diagram:1.5.4.1'
	// Why?
	// To make use of my modified version of "SnippetsDirectoryResolver.class" from "spring-restdocs-asciidoctor".
	// See above, for details: System.setProperty("restdocs.asciidoctor.snippets", "target/generated-snippets").
	asciidoctor group: 'io.github.tobiashochguertel.restdocs', name: 'spring-restdocs-asciidoctor', version: '2.0.2.BUILD-SNAPSHOT'
}

asciidoctorj {
	version = '1.5.4'
}

//tag::AsciidoctorTask[]

// common settings for asciidoctor
// this is needed for PDF generation with plantUML
def type = tasks.withType(AsciidoctorTask) { docTask ->

	config.taskInputsDirs.each {
		inputs.dir new File(docDir, it)
	}
	config.taskInputsFiles.each {
		inputs.file new File(docDir, it)
	}

	// configure source and output files and folders
	outputDir = file(targetDir)
	sourceDir = file(srcDir)

	attributes             \
                        'pdf-stylesdir': "${docDir}/pdfTheme",
			'pdf-style': 'custom',
			'source-highlighter': 'coderay',
			'imagesdir': 'images',
			'toc': 'left',
			'icons': 'font',
			'javaVersion': "$javaVersion",
			'currentDate': "$currentDate",
			'allow-uri-read': true,
			'manualdir': "https://github.com/docToolchain/docToolchain/blob/master/src/docs/manual/"
	// Here we can add the code for extensions we write.
	extensions {
		inlinemacro(name: "jira") {
			parent, target, attributes ->
				options = [
						"type"  : ":link",
						"target": jiraRoot + "/browse/${target}".toString(),
						"id"    : "${target}"
				]

				// Create the link to the issue.
				createInline(parent, "anchor", target, attributes, options).render()
		}
	}

	// good to see what the build is doing...
	logDocuments = true

	requires = ['asciidoctor-diagram']

}
//end::AsciidoctorTask[]

//tag::generateHTML[]
task generateHTML(
		type: AsciidoctorTask,
		group: 'docToolchain',
		description: 'use html5 as asciidoc backend') {

	logger.info('An info log message.')
	logger.error('An error log message.') // appears, default logs errors and warnings, but not info to console.

	attributes            \
                   'plantUMLDir': ''

	onlyIf {
		!sourceFiles.findAll {
			'html' in it.formats
		}.empty
	}

	sources {
		sourceFiles.findAll {
			'html' in it.formats
		}.each {
			include it.file
		}
	}

	backends = ['html5']
}
//end::generateHTML[]

//tag::generatePDF[]
task generatePDF(
		type: AsciidoctorTask,
		group: 'docToolchain',
		description: 'use pdf as asciidoc backend') {

	attributes            \
                   'plantUMLDir': file("${docDir}/${config.outputPath}/images/plantUML/").path

	onlyIf {
		!sourceFiles.findAll {
			'pdf' in it.formats
		}.empty
	}

	sources {
		sourceFiles.findAll {
			'pdf' in it.formats
		}.each {
			include it.file
		}
	}

	backends = ['pdf']
}
//end::generatePDF[]

//tag::generateDocbook[]
task generateDocbook(
		type: AsciidoctorTask,
		group: 'docToolchain',
		description: 'use docbook as asciidoc backend') {

	onlyIf {
		!sourceFiles.findAll {
			'docbook' in it.formats
		}.empty
	}

	sources {
		sourceFiles.findAll {
			'docbook' in it.formats
		}.each {
			include it.file
		}
	}

	backends = ['docbook']
}
//end::generateDocbook[]

//tag::generateDeck[]
task generateDeck(
		type: AsciidoctorTask,
		group: 'docToolchain',
		description: 'use revealJs as asciidoc backend to create a presentation') {

	attributes            \
                   'plantUMLDir': '',
			'idprefix': 'slide-',
			'idseparator': '-',
			'docinfo1': '',
			'revealjs_theme': 'black',
			'revealjs_progress': 'true',
			'revealjs_touch': 'true',
			'revealjs_hideAddressBar': 'true',
			'revealjs_transition': 'linear',
			'revealjs_history': 'true',
			'revealjs_slideNumber': 'true'

	options template_dirs: [new File('resources/asciidoctor-reveal.js', 'templates/slim').absolutePath]

	onlyIf {
		!sourceFiles.findAll {
			'revealjs' in it.formats
		}.empty
	}

	sources {
		sourceFiles.findAll {
			'revealjs' in it.formats
		}.each {
			include it.file
		}

	}

	outputDir = file(targetDir + '/decks/')

	resources {
		from('resources') {
			include 'reveal.js/**'
		}
		from(sourceDir) {
			include 'images/**'
		}
		into("ppt")
		logger.error "${docDir}/${config.outputPath}/ppt/images"
	}
}
//end::generateDeck[]
